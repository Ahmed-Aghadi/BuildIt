{
  "address": "0x52Cb4B27503848ABd8dd3629474835299E1E99af",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "contract IPolygonZkEVMBridge",
          "name": "_polygonZkEVMBridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPolygonZkEVMBridge",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "chains",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationChain",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "forceUpdateGlobalExitRoot",
          "type": "bool"
        }
      ],
      "name": "crossChainTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintMore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "networkID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sourceAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "sourceChain",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "onMessageReceived",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polygonZkEVMBridge",
      "outputs": [
        {
          "internalType": "contract IPolygonZkEVMBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "chain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8fa75911e0c2b52a927905236c61d2aebfd8807f65be5d81eaf0add46355f625",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0x52Cb4B27503848ABd8dd3629474835299E1E99af",
    "transactionIndex": 12,
    "gasUsed": "2006932",
    "logsBloom": "0x
    "blockHash": "0x6f03bc21c1b3a2a8244e9a37891e4fc16da36c5c3d7415b09ac7c2cd3821efb7",
    "transactionHash": "0x8fa75911e0c2b52a927905236c61d2aebfd8807f65be5d81eaf0add46355f625",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10082940,
        "transactionHash": "0x8fa75911e0c2b52a927905236c61d2aebfd8807f65be5d81eaf0add46355f625",
        "address": "0x52Cb4B27503848ABd8dd3629474835299E1E99af",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000de82dcc40b8468639251b089f8b4a4400022e04"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x6f03bc21c1b3a2a8244e9a37891e4fc16da36c5c3d7415b09ac7c2cd3821efb7"
      }
    ],
    "blockNumber": 10082940,
    "cumulativeGasUsed": "3424853",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://www.example.com/utils/",
    "0xbC9Da99F3c34E8e93134129A5466c3F5970cE210",
    "0xF6BEEeBB578e214CA9E23B0e9683454Ff88Ed2A7"
  ],
  "numDeployments": 1,
  "solcInputHash": "5d3ad3cf936986948735f02ea05b5ec7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"contract IPolygonZkEVMBridge\",\"name\":\"_polygonZkEVMBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPolygonZkEVMBridge\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"chains\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationChain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forceUpdateGlobalExitRoot\",\"type\":\"bool\"}],\"name\":\"crossChainTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintMore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"sourceChain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"onMessageReceived\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polygonZkEVMBridge\",\"outputs\":[{\"internalType\":\"contract IPolygonZkEVMBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/UtilsLxLy.sol\":\"Utils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":chainlink/=lib/chainlink-brownie-contracts/contracts/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/solmate/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Efficient library for creating string representations of integers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol)\\nlibrary LibString {\\n    function toString(int256 value) internal pure returns (string memory str) {\\n        if (value >= 0) return toString(uint256(value));\\n\\n        unchecked {\\n            str = toString(uint256(-value));\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Note: This is only safe because we over-allocate memory\\n                // and write the string from right to left in toString(uint256),\\n                // and thus can be sure that sub(str, 1) is an unused memory location.\\n\\n                let length := mload(str) // Load the string length.\\n                // Put the - character at the start of the string contents.\\n                mstore(str, 45) // 45 is the ASCII code for the - character.\\n                str := sub(str, 1) // Move back the string pointer by a byte.\\n                mstore(str, add(length, 1)) // Update the string length.\\n            }\\n        }\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but we allocate 160 bytes\\n            // to keep the free memory pointer word aligned. We'll need 1 word for the length, 1 word for the\\n            // trailing zeros padding, and 3 other words for a max of 78 digits. In total: 5 * 32 = 160 bytes.\\n            let newFreeMemoryPointer := add(mload(0x40), 160)\\n\\n            // Update the free memory pointer to avoid overriding our string.\\n            mstore(0x40, newFreeMemoryPointer)\\n\\n            // Assign str to the end of the zone of newly allocated memory.\\n            str := sub(newFreeMemoryPointer, 32)\\n\\n            // Clean the last word of memory it may not be overwritten.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                // Move the pointer 1 byte to the left.\\n                str := sub(str, 1)\\n\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n\\n                // Keep dividing temp until zero.\\n                temp := div(temp, 10)\\n\\n                 // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            // Compute and cache the final total length of the string.\\n            let length := sub(end, str)\\n\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 32)\\n\\n            // Store the string's length at the start of memory allocated for our string.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5129243d01d1ff65ee34aed11660bf13f01964f481664c96676877df70f32909\",\"license\":\"MIT\"},\"src/UtilsLxLy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\n// import \\\"solmate/tokens/ERC1155.sol\\\";\\nimport {ERC1155} from \\\"openzeppelin/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"solmate/utils/LibString.sol\\\";\\n// import \\\"solmate/auth/Owned.sol\\\";\\nimport \\\"openzeppelin/access/Ownable.sol\\\";\\nimport \\\"openzeppelin/metatx/ERC2771Context.sol\\\";\\nimport \\\"./polygonZKEVMContracts/interfaces/IBridgeMessageReceiver.sol\\\";\\nimport \\\"./polygonZKEVMContracts/interfaces/IPolygonZkEVMBridge.sol\\\";\\n\\ncontract Utils is ERC2771Context, ERC1155, Ownable, IBridgeMessageReceiver {\\n    error InvalidChain();\\n    error InsufficientBalance();\\n    error NotPolygonZkEVMBridge();\\n    string public baseUri;\\n    uint256 public utilCount;\\n\\n    // Global Exit Root address\\n    IPolygonZkEVMBridge public immutable polygonZkEVMBridge;\\n\\n    // Current network identifier\\n    uint32 public immutable networkID;\\n\\n    mapping(uint32 => address) public chains;\\n\\n    constructor(\\n        string memory _baseUri,\\n        address trustedForwarder,\\n        IPolygonZkEVMBridge _polygonZkEVMBridge\\n    ) ERC2771Context(trustedForwarder) ERC1155(_baseUri) {\\n        baseUri = _baseUri;\\n        polygonZkEVMBridge = _polygonZkEVMBridge;\\n        networkID = polygonZkEVMBridge.networkID();\\n    }\\n\\n    function setChain(uint32 chain, address addr) public onlyOwner {\\n        chains[chain] = addr;\\n    }\\n\\n    function crossChainTransfer(\\n        uint32 destinationChain,\\n        uint tokenId,\\n        uint amount,\\n        bool forceUpdateGlobalExitRoot\\n    ) public payable {\\n        address destinationAddress = chains[destinationChain];\\n        if (destinationAddress == address(0)) {\\n            revert InvalidChain();\\n        }\\n        if (amount > balanceOf(_msgSender(), tokenId)) {\\n            revert InsufficientBalance();\\n        }\\n        _burn(_msgSender(), tokenId, amount);\\n        bytes memory payload = abi.encode(tokenId, amount, _msgSender());\\n        // Bridge ping message\\n        polygonZkEVMBridge.bridgeMessage(\\n            destinationChain,\\n            destinationAddress,\\n            forceUpdateGlobalExitRoot,\\n            payload\\n        );\\n    }\\n\\n    function onMessageReceived(\\n        address sourceAddress,\\n        uint32 sourceChain,\\n        bytes calldata payload\\n    ) external payable override {\\n        // Can only be called by the bridge\\n        if (_msgSender() != address(polygonZkEVMBridge)) {\\n            revert NotPolygonZkEVMBridge();\\n        }\\n        if (\\n            keccak256(abi.encodePacked(chains[sourceChain])) !=\\n            keccak256(abi.encodePacked(sourceAddress))\\n        ) {\\n            revert InvalidChain();\\n        }\\n        (uint tokenId, uint amount, address sender) = abi.decode(\\n            payload,\\n            (uint, uint, address)\\n        );\\n        _mint(sender, tokenId, amount, \\\"\\\");\\n    }\\n\\n    function mintMore(uint id, uint amount) public onlyOwner {\\n        _mint(_msgSender(), id, amount, \\\"\\\");\\n    }\\n\\n    function mint(uint256 amount) public onlyOwner {\\n        utilCount += 1;\\n        _mint(_msgSender(), utilCount, amount, \\\"\\\");\\n    }\\n\\n    function uri(\\n        uint256 id\\n    ) public view virtual override returns (string memory) {\\n        return string(abi.encodePacked(baseUri, LibString.toString(id)));\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(Context, ERC2771Context)\\n        returns (address sender)\\n    {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(Context, ERC2771Context)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771Context._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xae1119f226b4d3ab28430a918ee4e0961298784bb53a226ad1b78bf68ccccb59\",\"license\":\"UNLICENSED\"},\"src/polygonZKEVMContracts/interfaces/IBridgeMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Define interface for PolygonZkEVM Bridge message receiver\\n */\\ninterface IBridgeMessageReceiver {\\n    function onMessageReceived(\\n        address originAddress,\\n        uint32 originNetwork,\\n        bytes memory data\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x481ee44727ea006426fd866422c50c00421283be057a6809654371712386c8a5\",\"license\":\"AGPL-3.0\"},\"src/polygonZKEVMContracts/interfaces/IPolygonZkEVMBridge.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPolygonZkEVMBridge {\\n    /**\\n     * @dev Thrown when sender is not the PolygonZkEVM address\\n     */\\n    error OnlyPolygonZkEVM();\\n\\n    /**\\n     * @dev Thrown when the destination network is invalid\\n     */\\n    error DestinationNetworkInvalid();\\n\\n    /**\\n     * @dev Thrown when the amount does not match msg.value\\n     */\\n    error AmountDoesNotMatchMsgValue();\\n\\n    /**\\n     * @dev Thrown when user is bridging tokens and is also sending a value\\n     */\\n    error MsgValueNotZero();\\n\\n    /**\\n     * @dev Thrown when the Ether transfer on claimAsset fails\\n     */\\n    error EtherTransferFailed();\\n\\n    /**\\n     * @dev Thrown when the message transaction on claimMessage fails\\n     */\\n    error MessageFailed();\\n\\n    /**\\n     * @dev Thrown when the global exit root does not exist\\n     */\\n    error GlobalExitRootInvalid();\\n\\n    /**\\n     * @dev Thrown when the smt proof does not match\\n     */\\n    error InvalidSmtProof();\\n\\n    /**\\n     * @dev Thrown when an index is already claimed\\n     */\\n    error AlreadyClaimed();\\n\\n    /**\\n     * @dev Thrown when the owner of permit does not match the sender\\n     */\\n    error NotValidOwner();\\n\\n    /**\\n     * @dev Thrown when the spender of the permit does not match this contract address\\n     */\\n    error NotValidSpender();\\n\\n    /**\\n     * @dev Thrown when the amount of the permit does not match\\n     */\\n    error NotValidAmount();\\n\\n    /**\\n     * @dev Thrown when the permit data contains an invalid signature\\n     */\\n    error NotValidSignature();\\n\\n    function bridgeAsset(\\n        uint32 destinationNetwork,\\n        address destinationAddress,\\n        uint256 amount,\\n        address token,\\n        bool forceUpdateGlobalExitRoot,\\n        bytes calldata permitData\\n    ) external payable;\\n\\n    function bridgeMessage(\\n        uint32 destinationNetwork,\\n        address destinationAddress,\\n        bool forceUpdateGlobalExitRoot,\\n        bytes calldata metadata\\n    ) external payable;\\n\\n    function claimAsset(\\n        bytes32[32] calldata smtProof,\\n        uint32 index,\\n        bytes32 mainnetExitRoot,\\n        bytes32 rollupExitRoot,\\n        uint32 originNetwork,\\n        address originTokenAddress,\\n        uint32 destinationNetwork,\\n        address destinationAddress,\\n        uint256 amount,\\n        bytes calldata metadata\\n    ) external;\\n\\n    function claimMessage(\\n        bytes32[32] calldata smtProof,\\n        uint32 index,\\n        bytes32 mainnetExitRoot,\\n        bytes32 rollupExitRoot,\\n        uint32 originNetwork,\\n        address originAddress,\\n        uint32 destinationNetwork,\\n        address destinationAddress,\\n        uint256 amount,\\n        bytes calldata metadata\\n    ) external;\\n\\n    function updateGlobalExitRoot() external;\\n\\n    function activateEmergencyState() external;\\n\\n    function deactivateEmergencyState() external;\\n\\n    function networkID() external returns (uint32);\\n}\\n\",\"keccak256\":\"0x11b3a03d1707ebc3f36703a367afe8d2e63f74115127ac7527e2c0a1c239448d\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620025dc380380620025dc83398101604081905262000034916200029a565b6001600160a01b038216608052826200004d81620000fe565b50620000626200005c62000117565b62000133565b825162000077906004906020860190620001c1565b506001600160a01b03811660a08190526040805163bab161bf60e01b8152905163bab161bf9160048082019260209290919082900301816000875af1158015620000c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000eb91906200039d565b63ffffffff1660c0525062000408915050565b805162000113906002906020840190620001c1565b5050565b60006200012e6200018560201b62000c0e1760201c565b905090565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6080516000906001600160a01b03163303620001a8575060131936013560601c90565b6200012e620001bd60201b62000c5a1760201c565b3390565b828054620001cf90620003cc565b90600052602060002090601f016020900481019282620001f357600085556200023e565b82601f106200020e57805160ff19168380011785556200023e565b828001600101855582156200023e579182015b828111156200023e57825182559160200191906001019062000221565b506200024c92915062000250565b5090565b5b808211156200024c576000815560010162000251565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200029557600080fd5b919050565b600080600060608486031215620002b057600080fd5b83516001600160401b0380821115620002c857600080fd5b818601915086601f830112620002dd57600080fd5b815181811115620002f257620002f262000267565b604051601f8201601f19908116603f011681019083821181831017156200031d576200031d62000267565b816040528281526020935089848487010111156200033a57600080fd5b600091505b828210156200035e57848201840151818301850152908301906200033f565b82821115620003705760008484830101525b9650620003829150508682016200027d565b9350505062000394604085016200027d565b90509250925092565b600060208284031215620003b057600080fd5b815163ffffffff81168114620003c557600080fd5b9392505050565b600181811c90821680620003e157607f821691505b6020821081036200040257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05161218f6200044d60003960006103dd0152600081816102bd015281816105db015261083a01526000818161027b0152610c12015261218f6000f3fe6080604052600436106101345760003560e01c80638b203dd4116100ab578063baacbe9b1161006f578063baacbe9b146103b5578063bab161bf146103cb578063e416749f14610414578063e985e9c514610434578063f242432a1461047d578063f2fde38b1461049d57600080fd5b80638b203dd41461030c5780638da5cb5b146103425780639abc832014610360578063a0712d6814610375578063a22cb4651461039557600080fd5b806340150236116100fd57806340150236146101fe5780634e1273f4146102115780634f7c055e1461023e578063572b6c051461025e5780635d43792c146102ab578063715018a6146102f757600080fd5b8062fdd58e1461013957806301ffc9a71461016c5780630e89341c1461019c5780631806b5f2146101c95780632eb2c2d6146101de575b600080fd5b34801561014557600080fd5b50610159610154366004611687565b6104bd565b6040519081526020015b60405180910390f35b34801561017857600080fd5b5061018c6101873660046116c9565b610553565b6040519015158152602001610163565b3480156101a857600080fd5b506101bc6101b73660046116ed565b6105a5565b6040516101639190611762565b6101dc6101d736600461178e565b6105d9565b005b3480156101ea57600080fd5b506101dc6101f936600461196a565b610706565b6101dc61020c366004611a28565b610764565b34801561021d57600080fd5b5061023161022c366004611a6e565b6108af565b6040516101639190611b76565b34801561024a57600080fd5b506101dc610259366004611b89565b6109d9565b34801561026a57600080fd5b5061018c610279366004611bab565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b3480156102b757600080fd5b506102df7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610163565b34801561030357600080fd5b506101dc610a07565b34801561031857600080fd5b506102df610327366004611bc8565b6006602052600090815260409020546001600160a01b031681565b34801561034e57600080fd5b506003546001600160a01b03166102df565b34801561036c57600080fd5b506101bc610a1b565b34801561038157600080fd5b506101dc6103903660046116ed565b610aa9565b3480156103a157600080fd5b506101dc6103b0366004611be3565b610af1565b3480156103c157600080fd5b5061015960055481565b3480156103d757600080fd5b506103ff7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610163565b34801561042057600080fd5b506101dc61042f366004611c18565b610b03565b34801561044057600080fd5b5061018c61044f366004611c4f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561048957600080fd5b506101dc610498366004611c6d565b610b41565b3480156104a957600080fd5b506101dc6104b8366004611bab565b610b98565b60006001600160a01b03831661052d5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061058457506001600160e01b031982166303a24d0760e21b145b8061059f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060046105b283610c5e565b6040516020016105c3929190611d2c565b6040516020818303038152906040529050919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060b610ca2565b6001600160a01b03161461063257604051636d10671f60e11b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606086901b16602082015260340160408051601f19818403018152828252805160209182012063ffffffff8716600090815260068352929092205460601b6bffffffffffffffffffffffff1916908301529060340160405160208183030381529060405280519060200120146106cc5760405163057f3fa760e51b815260040160405180910390fd5b600080806106dc84860186611dd2565b9250925092506106fd81848460405180602001604052806000815250610cac565b50505050505050565b61070e610ca2565b6001600160a01b0316856001600160a01b0316148061073457506107348561044f610ca2565b6107505760405162461bcd60e51b815260040161052490611e0b565b61075d8585858585610dc2565b5050505050565b63ffffffff84166000908152600660205260409020546001600160a01b0316806107a15760405163057f3fa760e51b815260040160405180910390fd5b6107b26107ac610ca2565b856104bd565b8311156107d257604051631e9acf1760e31b815260040160405180910390fd5b6107e46107dd610ca2565b8585610faa565b600084846107f0610ca2565b6040805160208101949094528301919091526001600160a01b0316606082015260800160408051601f1981840301815290829052630481fe6f60e31b825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063240ff37890610875908990869088908790600401611e59565b600060405180830381600087803b15801561088f57600080fd5b505af11580156108a3573d6000803e3d6000fd5b50505050505050505050565b606081518351146109145760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610524565b6000835167ffffffffffffffff8111156109305761093061181e565b604051908082528060200260200182016040528015610959578160200160208202803683370190505b50905060005b84518110156109d1576109a485828151811061097d5761097d611e9b565b602002602001015185838151811061099757610997611e9b565b60200260200101516104bd565b8282815181106109b6576109b6611e9b565b60209081029190910101526109ca81611ec7565b905061095f565b509392505050565b6109e1611131565b610a036109ec610ca2565b838360405180602001604052806000815250610cac565b5050565b610a0f611131565b610a1960006111aa565b565b60048054610a2890611cd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5490611cd6565b8015610aa15780601f10610a7657610100808354040283529160200191610aa1565b820191906000526020600020905b815481529060010190602001808311610a8457829003601f168201915b505050505081565b610ab1611131565b600160056000828254610ac49190611ee0565b90915550610aee9050610ad5610ca2565b6005548360405180602001604052806000815250610cac565b50565b610a03610afc610ca2565b83836111fc565b610b0b611131565b63ffffffff91909116600090815260066020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b610b49610ca2565b6001600160a01b0316856001600160a01b03161480610b6f5750610b6f8561044f610ca2565b610b8b5760405162461bcd60e51b815260040161052490611e0b565b61075d85858585856112dc565b610ba0611131565b6001600160a01b038116610c055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610524565b610aee816111aa565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610c4d575060131936013560601c90565b503390565b905090565b90565b3390565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480610c785750819003601f19909101908152919050565b6000610c52610c0e565b6001600160a01b038416610d0c5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610524565b6000610d16610ca2565b90506000610d2385611411565b90506000610d3085611411565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610d62908490611ee0565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46106fd8360008989898961145c565b8151835114610e245760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610524565b6001600160a01b038416610e4a5760405162461bcd60e51b815260040161052490611ef8565b6000610e54610ca2565b905060005b8451811015610f3c576000858281518110610e7657610e76611e9b565b602002602001015190506000858381518110610e9457610e94611e9b565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610ee45760405162461bcd60e51b815260040161052490611f3d565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610f21908490611ee0565b9250508190555050505080610f3590611ec7565b9050610e59565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f8c929190611f87565b60405180910390a4610fa28187878787876115b7565b505050505050565b6001600160a01b03831661100c5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610524565b6000611016610ca2565b9050600061102384611411565b9050600061103084611411565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156110b95760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610524565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526106fd565b611139610ca2565b6001600160a01b03166111546003546001600160a01b031690565b6001600160a01b031614610a195760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610524565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361126f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610524565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166113025760405162461bcd60e51b815260040161052490611ef8565b600061130c610ca2565b9050600061131985611411565b9050600061132685611411565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156113695760405162461bcd60e51b815260040161052490611f3d565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906113a6908490611ee0565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611406848a8a8a8a8a61145c565b505050505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061144b5761144b611e9b565b602090810291909101015292915050565b6001600160a01b0384163b15610fa25760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906114a09089908990889088908890600401611fac565b6020604051808303816000875af19250505080156114db575060408051601f3d908101601f191682019092526114d891810190611ff1565b60015b611587576114e761200e565b806308c379a00361152057506114fb612029565b806115065750611522565b8060405162461bcd60e51b81526004016105249190611762565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610524565b6001600160e01b0319811663f23a6e6160e01b146106fd5760405162461bcd60e51b8152600401610524906120b3565b6001600160a01b0384163b15610fa25760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906115fb90899089908890889088906004016120fb565b6020604051808303816000875af1925050508015611636575060408051601f3d908101601f1916820190925261163391810190611ff1565b60015b611642576114e761200e565b6001600160e01b0319811663bc197c8160e01b146106fd5760405162461bcd60e51b8152600401610524906120b3565b6001600160a01b0381168114610aee57600080fd5b6000806040838503121561169a57600080fd5b82356116a581611672565b946020939093013593505050565b6001600160e01b031981168114610aee57600080fd5b6000602082840312156116db57600080fd5b81356116e6816116b3565b9392505050565b6000602082840312156116ff57600080fd5b5035919050565b60005b83811015611721578181015183820152602001611709565b83811115611730576000848401525b50505050565b6000815180845261174e816020860160208601611706565b601f01601f19169290920160200192915050565b6020815260006116e66020830184611736565b803563ffffffff8116811461178957600080fd5b919050565b600080600080606085870312156117a457600080fd5b84356117af81611672565b93506117bd60208601611775565b9250604085013567ffffffffffffffff808211156117da57600080fd5b818701915087601f8301126117ee57600080fd5b8135818111156117fd57600080fd5b88602082850101111561180f57600080fd5b95989497505060200194505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561185a5761185a61181e565b6040525050565b600067ffffffffffffffff82111561187b5761187b61181e565b5060051b60200190565b600082601f83011261189657600080fd5b813560206118a382611861565b6040516118b08282611834565b83815260059390931b85018201928281019150868411156118d057600080fd5b8286015b848110156118eb57803583529183019183016118d4565b509695505050505050565b600082601f83011261190757600080fd5b813567ffffffffffffffff8111156119215761192161181e565b604051611938601f8301601f191660200182611834565b81815284602083860101111561194d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561198257600080fd5b853561198d81611672565b9450602086013561199d81611672565b9350604086013567ffffffffffffffff808211156119ba57600080fd5b6119c689838a01611885565b945060608801359150808211156119dc57600080fd5b6119e889838a01611885565b935060808801359150808211156119fe57600080fd5b50611a0b888289016118f6565b9150509295509295909350565b8035801515811461178957600080fd5b60008060008060808587031215611a3e57600080fd5b611a4785611775565b93506020850135925060408501359150611a6360608601611a18565b905092959194509250565b60008060408385031215611a8157600080fd5b823567ffffffffffffffff80821115611a9957600080fd5b818501915085601f830112611aad57600080fd5b81356020611aba82611861565b604051611ac78282611834565b83815260059390931b8501820192828101915089841115611ae757600080fd5b948201945b83861015611b0e578535611aff81611672565b82529482019490820190611aec565b96505086013592505080821115611b2457600080fd5b50611b3185828601611885565b9150509250929050565b600081518084526020808501945080840160005b83811015611b6b57815187529582019590820190600101611b4f565b509495945050505050565b6020815260006116e66020830184611b3b565b60008060408385031215611b9c57600080fd5b50508035926020909101359150565b600060208284031215611bbd57600080fd5b81356116e681611672565b600060208284031215611bda57600080fd5b6116e682611775565b60008060408385031215611bf657600080fd5b8235611c0181611672565b9150611c0f60208401611a18565b90509250929050565b60008060408385031215611c2b57600080fd5b611c3483611775565b91506020830135611c4481611672565b809150509250929050565b60008060408385031215611c6257600080fd5b8235611c3481611672565b600080600080600060a08688031215611c8557600080fd5b8535611c9081611672565b94506020860135611ca081611672565b93506040860135925060608601359150608086013567ffffffffffffffff811115611cca57600080fd5b611a0b888289016118f6565b600181811c90821680611cea57607f821691505b602082108103611d0a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008151611d22818560208601611706565b9290920192915050565b600080845481600182811c915080831680611d4857607f831692505b60208084108203611d6757634e487b7160e01b86526022600452602486fd5b818015611d7b5760018114611d8c57611db9565b60ff19861689528489019650611db9565b60008b81526020902060005b86811015611db15781548b820152908501908301611d98565b505084890196505b505050505050611dc98185611d10565b95945050505050565b600080600060608486031215611de757600080fd5b83359250602084013591506040840135611e0081611672565b809150509250925092565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b63ffffffff851681526001600160a01b03841660208201528215156040820152608060608201819052600090611e9190830184611736565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611ed957611ed9611eb1565b5060010190565b60008219821115611ef357611ef3611eb1565b500190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000611f9a6040830185611b3b565b8281036020840152611dc98185611b3b565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611fe690830184611736565b979650505050505050565b60006020828403121561200357600080fd5b81516116e6816116b3565b600060033d1115610c575760046000803e5060005160e01c90565b600060443d10156120375790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561206757505050505090565b828501915081518181111561207f5750505050505090565b843d87010160208285010111156120995750505050505090565b6120a860208286010187611834565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061212790830186611b3b565b82810360608401526121398186611b3b565b9050828103608084015261214d8185611736565b9897505050505050505056fea2646970667358221220d23dc27e3094bbc4453451b8271a05bbc2cb93499da388a8cc3fdd5d00fe371c64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106101345760003560e01c80638b203dd4116100ab578063baacbe9b1161006f578063baacbe9b146103b5578063bab161bf146103cb578063e416749f14610414578063e985e9c514610434578063f242432a1461047d578063f2fde38b1461049d57600080fd5b80638b203dd41461030c5780638da5cb5b146103425780639abc832014610360578063a0712d6814610375578063a22cb4651461039557600080fd5b806340150236116100fd57806340150236146101fe5780634e1273f4146102115780634f7c055e1461023e578063572b6c051461025e5780635d43792c146102ab578063715018a6146102f757600080fd5b8062fdd58e1461013957806301ffc9a71461016c5780630e89341c1461019c5780631806b5f2146101c95780632eb2c2d6146101de575b600080fd5b34801561014557600080fd5b50610159610154366004611687565b6104bd565b6040519081526020015b60405180910390f35b34801561017857600080fd5b5061018c6101873660046116c9565b610553565b6040519015158152602001610163565b3480156101a857600080fd5b506101bc6101b73660046116ed565b6105a5565b6040516101639190611762565b6101dc6101d736600461178e565b6105d9565b005b3480156101ea57600080fd5b506101dc6101f936600461196a565b610706565b6101dc61020c366004611a28565b610764565b34801561021d57600080fd5b5061023161022c366004611a6e565b6108af565b6040516101639190611b76565b34801561024a57600080fd5b506101dc610259366004611b89565b6109d9565b34801561026a57600080fd5b5061018c610279366004611bab565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b3480156102b757600080fd5b506102df7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610163565b34801561030357600080fd5b506101dc610a07565b34801561031857600080fd5b506102df610327366004611bc8565b6006602052600090815260409020546001600160a01b031681565b34801561034e57600080fd5b506003546001600160a01b03166102df565b34801561036c57600080fd5b506101bc610a1b565b34801561038157600080fd5b506101dc6103903660046116ed565b610aa9565b3480156103a157600080fd5b506101dc6103b0366004611be3565b610af1565b3480156103c157600080fd5b5061015960055481565b3480156103d757600080fd5b506103ff7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610163565b34801561042057600080fd5b506101dc61042f366004611c18565b610b03565b34801561044057600080fd5b5061018c61044f366004611c4f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561048957600080fd5b506101dc610498366004611c6d565b610b41565b3480156104a957600080fd5b506101dc6104b8366004611bab565b610b98565b60006001600160a01b03831661052d5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061058457506001600160e01b031982166303a24d0760e21b145b8061059f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060046105b283610c5e565b6040516020016105c3929190611d2c565b6040516020818303038152906040529050919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661060b610ca2565b6001600160a01b03161461063257604051636d10671f60e11b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606086901b16602082015260340160408051601f19818403018152828252805160209182012063ffffffff8716600090815260068352929092205460601b6bffffffffffffffffffffffff1916908301529060340160405160208183030381529060405280519060200120146106cc5760405163057f3fa760e51b815260040160405180910390fd5b600080806106dc84860186611dd2565b9250925092506106fd81848460405180602001604052806000815250610cac565b50505050505050565b61070e610ca2565b6001600160a01b0316856001600160a01b0316148061073457506107348561044f610ca2565b6107505760405162461bcd60e51b815260040161052490611e0b565b61075d8585858585610dc2565b5050505050565b63ffffffff84166000908152600660205260409020546001600160a01b0316806107a15760405163057f3fa760e51b815260040160405180910390fd5b6107b26107ac610ca2565b856104bd565b8311156107d257604051631e9acf1760e31b815260040160405180910390fd5b6107e46107dd610ca2565b8585610faa565b600084846107f0610ca2565b6040805160208101949094528301919091526001600160a01b0316606082015260800160408051601f1981840301815290829052630481fe6f60e31b825291506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063240ff37890610875908990869088908790600401611e59565b600060405180830381600087803b15801561088f57600080fd5b505af11580156108a3573d6000803e3d6000fd5b50505050505050505050565b606081518351146109145760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610524565b6000835167ffffffffffffffff8111156109305761093061181e565b604051908082528060200260200182016040528015610959578160200160208202803683370190505b50905060005b84518110156109d1576109a485828151811061097d5761097d611e9b565b602002602001015185838151811061099757610997611e9b565b60200260200101516104bd565b8282815181106109b6576109b6611e9b565b60209081029190910101526109ca81611ec7565b905061095f565b509392505050565b6109e1611131565b610a036109ec610ca2565b838360405180602001604052806000815250610cac565b5050565b610a0f611131565b610a1960006111aa565b565b60048054610a2890611cd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5490611cd6565b8015610aa15780601f10610a7657610100808354040283529160200191610aa1565b820191906000526020600020905b815481529060010190602001808311610a8457829003601f168201915b505050505081565b610ab1611131565b600160056000828254610ac49190611ee0565b90915550610aee9050610ad5610ca2565b6005548360405180602001604052806000815250610cac565b50565b610a03610afc610ca2565b83836111fc565b610b0b611131565b63ffffffff91909116600090815260066020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b610b49610ca2565b6001600160a01b0316856001600160a01b03161480610b6f5750610b6f8561044f610ca2565b610b8b5760405162461bcd60e51b815260040161052490611e0b565b61075d85858585856112dc565b610ba0611131565b6001600160a01b038116610c055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610524565b610aee816111aa565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610c4d575060131936013560601c90565b503390565b905090565b90565b3390565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480610c785750819003601f19909101908152919050565b6000610c52610c0e565b6001600160a01b038416610d0c5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610524565b6000610d16610ca2565b90506000610d2385611411565b90506000610d3085611411565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610d62908490611ee0565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46106fd8360008989898961145c565b8151835114610e245760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610524565b6001600160a01b038416610e4a5760405162461bcd60e51b815260040161052490611ef8565b6000610e54610ca2565b905060005b8451811015610f3c576000858281518110610e7657610e76611e9b565b602002602001015190506000858381518110610e9457610e94611e9b565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610ee45760405162461bcd60e51b815260040161052490611f3d565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610f21908490611ee0565b9250508190555050505080610f3590611ec7565b9050610e59565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610f8c929190611f87565b60405180910390a4610fa28187878787876115b7565b505050505050565b6001600160a01b03831661100c5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610524565b6000611016610ca2565b9050600061102384611411565b9050600061103084611411565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156110b95760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610524565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526106fd565b611139610ca2565b6001600160a01b03166111546003546001600160a01b031690565b6001600160a01b031614610a195760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610524565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361126f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610524565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166113025760405162461bcd60e51b815260040161052490611ef8565b600061130c610ca2565b9050600061131985611411565b9050600061132685611411565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156113695760405162461bcd60e51b815260040161052490611f3d565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906113a6908490611ee0565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611406848a8a8a8a8a61145c565b505050505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061144b5761144b611e9b565b602090810291909101015292915050565b6001600160a01b0384163b15610fa25760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906114a09089908990889088908890600401611fac565b6020604051808303816000875af19250505080156114db575060408051601f3d908101601f191682019092526114d891810190611ff1565b60015b611587576114e761200e565b806308c379a00361152057506114fb612029565b806115065750611522565b8060405162461bcd60e51b81526004016105249190611762565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610524565b6001600160e01b0319811663f23a6e6160e01b146106fd5760405162461bcd60e51b8152600401610524906120b3565b6001600160a01b0384163b15610fa25760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906115fb90899089908890889088906004016120fb565b6020604051808303816000875af1925050508015611636575060408051601f3d908101601f1916820190925261163391810190611ff1565b60015b611642576114e761200e565b6001600160e01b0319811663bc197c8160e01b146106fd5760405162461bcd60e51b8152600401610524906120b3565b6001600160a01b0381168114610aee57600080fd5b6000806040838503121561169a57600080fd5b82356116a581611672565b946020939093013593505050565b6001600160e01b031981168114610aee57600080fd5b6000602082840312156116db57600080fd5b81356116e6816116b3565b9392505050565b6000602082840312156116ff57600080fd5b5035919050565b60005b83811015611721578181015183820152602001611709565b83811115611730576000848401525b50505050565b6000815180845261174e816020860160208601611706565b601f01601f19169290920160200192915050565b6020815260006116e66020830184611736565b803563ffffffff8116811461178957600080fd5b919050565b600080600080606085870312156117a457600080fd5b84356117af81611672565b93506117bd60208601611775565b9250604085013567ffffffffffffffff808211156117da57600080fd5b818701915087601f8301126117ee57600080fd5b8135818111156117fd57600080fd5b88602082850101111561180f57600080fd5b95989497505060200194505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561185a5761185a61181e565b6040525050565b600067ffffffffffffffff82111561187b5761187b61181e565b5060051b60200190565b600082601f83011261189657600080fd5b813560206118a382611861565b6040516118b08282611834565b83815260059390931b85018201928281019150868411156118d057600080fd5b8286015b848110156118eb57803583529183019183016118d4565b509695505050505050565b600082601f83011261190757600080fd5b813567ffffffffffffffff8111156119215761192161181e565b604051611938601f8301601f191660200182611834565b81815284602083860101111561194d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561198257600080fd5b853561198d81611672565b9450602086013561199d81611672565b9350604086013567ffffffffffffffff808211156119ba57600080fd5b6119c689838a01611885565b945060608801359150808211156119dc57600080fd5b6119e889838a01611885565b935060808801359150808211156119fe57600080fd5b50611a0b888289016118f6565b9150509295509295909350565b8035801515811461178957600080fd5b60008060008060808587031215611a3e57600080fd5b611a4785611775565b93506020850135925060408501359150611a6360608601611a18565b905092959194509250565b60008060408385031215611a8157600080fd5b823567ffffffffffffffff80821115611a9957600080fd5b818501915085601f830112611aad57600080fd5b81356020611aba82611861565b604051611ac78282611834565b83815260059390931b8501820192828101915089841115611ae757600080fd5b948201945b83861015611b0e578535611aff81611672565b82529482019490820190611aec565b96505086013592505080821115611b2457600080fd5b50611b3185828601611885565b9150509250929050565b600081518084526020808501945080840160005b83811015611b6b57815187529582019590820190600101611b4f565b509495945050505050565b6020815260006116e66020830184611b3b565b60008060408385031215611b9c57600080fd5b50508035926020909101359150565b600060208284031215611bbd57600080fd5b81356116e681611672565b600060208284031215611bda57600080fd5b6116e682611775565b60008060408385031215611bf657600080fd5b8235611c0181611672565b9150611c0f60208401611a18565b90509250929050565b60008060408385031215611c2b57600080fd5b611c3483611775565b91506020830135611c4481611672565b809150509250929050565b60008060408385031215611c6257600080fd5b8235611c3481611672565b600080600080600060a08688031215611c8557600080fd5b8535611c9081611672565b94506020860135611ca081611672565b93506040860135925060608601359150608086013567ffffffffffffffff811115611cca57600080fd5b611a0b888289016118f6565b600181811c90821680611cea57607f821691505b602082108103611d0a57634e487b7160e01b600052602260045260246000fd5b50919050565b60008151611d22818560208601611706565b9290920192915050565b600080845481600182811c915080831680611d4857607f831692505b60208084108203611d6757634e487b7160e01b86526022600452602486fd5b818015611d7b5760018114611d8c57611db9565b60ff19861689528489019650611db9565b60008b81526020902060005b86811015611db15781548b820152908501908301611d98565b505084890196505b505050505050611dc98185611d10565b95945050505050565b600080600060608486031215611de757600080fd5b83359250602084013591506040840135611e0081611672565b809150509250925092565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b63ffffffff851681526001600160a01b03841660208201528215156040820152608060608201819052600090611e9190830184611736565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611ed957611ed9611eb1565b5060010190565b60008219821115611ef357611ef3611eb1565b500190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000611f9a6040830185611b3b565b8281036020840152611dc98185611b3b565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611fe690830184611736565b979650505050505050565b60006020828403121561200357600080fd5b81516116e6816116b3565b600060033d1115610c575760046000803e5060005160e01c90565b600060443d10156120375790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561206757505050505090565b828501915081518181111561207f5750505050505090565b843d87010160208285010111156120995750505050505090565b6120a860208286010187611834565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061212790830186611b3b565b82810360608401526121398186611b3b565b9050828103608084015261214d8185611736565b9897505050505050505056fea2646970667358221220d23dc27e3094bbc4453451b8271a05bbc2cb93499da388a8cc3fdd5d00fe371c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1187,
        "contract": "src/UtilsLxLy.sol:Utils",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1193,
        "contract": "src/UtilsLxLy.sol:Utils",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1195,
        "contract": "src/UtilsLxLy.sol:Utils",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 952,
        "contract": "src/UtilsLxLy.sol:Utils",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9953,
        "contract": "src/UtilsLxLy.sol:Utils",
        "label": "baseUri",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 9955,
        "contract": "src/UtilsLxLy.sol:Utils",
        "label": "utilCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9964,
        "contract": "src/UtilsLxLy.sol:Utils",
        "label": "chains",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}