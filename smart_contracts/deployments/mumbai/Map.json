{
  "address": "0x8b00E8128749B22E657620aB845186E6268515B4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perSize",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_utilsAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidXIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidYIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LandAlreadyOwned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SizeNotDivisibleByPerSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroPerSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroSize",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "land",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "landCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "landIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "map",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "xIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yIndex",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "utilId",
          "type": "uint256"
        }
      ],
      "name": "placeItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "x",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "y",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "utilId",
          "type": "uint256[]"
        }
      ],
      "name": "placeItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "removeItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "utilsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ea00842f0c7a0abeb0a2366cb227849cbd254f08f2f69fe38f8055eea9a2d85",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0x8b00E8128749B22E657620aB845186E6268515B4",
    "transactionIndex": 1,
    "gasUsed": "1667425",
    "logsBloom": "0x
    "blockHash": "0x77faa61e26be6fcffa9336f160a4867d424b8c0f7d71731e6b75879e17c245be",
    "transactionHash": "0x2ea00842f0c7a0abeb0a2366cb227849cbd254f08f2f69fe38f8055eea9a2d85",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 36273992,
        "transactionHash": "0x2ea00842f0c7a0abeb0a2366cb227849cbd254f08f2f69fe38f8055eea9a2d85",
        "address": "0x8b00E8128749B22E657620aB845186E6268515B4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000de82dcc40b8468639251b089f8b4a4400022e04"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x77faa61e26be6fcffa9336f160a4867d424b8c0f7d71731e6b75879e17c245be"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 36273992,
        "transactionHash": "0x2ea00842f0c7a0abeb0a2366cb227849cbd254f08f2f69fe38f8055eea9a2d85",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000de82dcc40b8468639251b089f8b4a4400022e04",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000012831b5cb23ddf000000000000000000000000000000000000000000000000188f906b74025a839000000000000000000000000000000000000000000000ec43c81f39c1caa0c7c00000000000000000000000000000000000000000000000187d0d5017501ca49000000000000000000000000000000000000000000000ec43daa2551e7cdea6c",
        "logIndex": 2,
        "blockHash": "0x77faa61e26be6fcffa9336f160a4867d424b8c0f7d71731e6b75879e17c245be"
      }
    ],
    "blockNumber": 36273992,
    "cumulativeGasUsed": "2664321",
    "status": 1,
    "byzantium": true
  },
  "args": [
    15,
    5,
    "https://www.example.com/map/",
    "0x4b22e4f5cfCb3e648a6F42Fa9D4E55985f9647D1"
  ],
  "numDeployments": 2,
  "solcInputHash": "cf1eac779d1a8f17dea9cee1b65abcda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perSize\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_utilsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidXIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidYIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LandAlreadyOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SizeNotDivisibleByPerSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPerSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroSize\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"land\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"map\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yIndex\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilId\",\"type\":\"uint256\"}],\"name\":\"placeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"x\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"y\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"utilId\",\"type\":\"uint256[]\"}],\"name\":\"placeItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Map.sol\":\"Map\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"},\"lib/solmate/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        // Storing these outside the loop saves ~15 gas per iteration.\\n        uint256 id;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < ids.length; ) {\\n            id = ids[i];\\n            amount = amounts[i];\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        require(owners.length == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < owners.length; ++i) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x00502c7d7671d9dce495858572943999633ac298f20dbb70476280a93720d412\",\"license\":\"AGPL-3.0-only\"},\"lib/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x04af19f16f00ba65ae168d6d10da5210dc18da6bcec6974dccf984ba388aa22d\",\"license\":\"AGPL-3.0-only\"},\"lib/solmate/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Efficient library for creating string representations of integers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol)\\nlibrary LibString {\\n    function toString(int256 value) internal pure returns (string memory str) {\\n        if (value >= 0) return toString(uint256(value));\\n\\n        unchecked {\\n            str = toString(uint256(-value));\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Note: This is only safe because we over-allocate memory\\n                // and write the string from right to left in toString(uint256),\\n                // and thus can be sure that sub(str, 1) is an unused memory location.\\n\\n                let length := mload(str) // Load the string length.\\n                // Put the - character at the start of the string contents.\\n                mstore(str, 45) // 45 is the ASCII code for the - character.\\n                str := sub(str, 1) // Move back the string pointer by a byte.\\n                mstore(str, add(length, 1)) // Update the string length.\\n            }\\n        }\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but we allocate 160 bytes\\n            // to keep the free memory pointer word aligned. We'll need 1 word for the length, 1 word for the\\n            // trailing zeros padding, and 3 other words for a max of 78 digits. In total: 5 * 32 = 160 bytes.\\n            let newFreeMemoryPointer := add(mload(0x40), 160)\\n\\n            // Update the free memory pointer to avoid overriding our string.\\n            mstore(0x40, newFreeMemoryPointer)\\n\\n            // Assign str to the end of the zone of newly allocated memory.\\n            str := sub(newFreeMemoryPointer, 32)\\n\\n            // Clean the last word of memory it may not be overwritten.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                // Move the pointer 1 byte to the left.\\n                str := sub(str, 1)\\n\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n\\n                // Keep dividing temp until zero.\\n                temp := div(temp, 10)\\n\\n                 // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            // Compute and cache the final total length of the string.\\n            let length := sub(end, str)\\n\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 32)\\n\\n            // Store the string's length at the start of memory allocated for our string.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5129243d01d1ff65ee34aed11660bf13f01964f481664c96676877df70f32909\",\"license\":\"MIT\"},\"src/Map.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"solmate/tokens/ERC721.sol\\\";\\nimport \\\"solmate/tokens/ERC1155.sol\\\";\\nimport \\\"solmate/utils/LibString.sol\\\";\\nimport \\\"solmate/auth/Owned.sol\\\";\\n\\nimport {ERC1155TokenReceiver} from \\\"solmate/tokens/ERC1155.sol\\\";\\n\\nerror ZeroSize();\\nerror ZeroPerSize();\\nerror SizeNotDivisibleByPerSize();\\nerror InvalidXIndex();\\nerror InvalidYIndex();\\nerror LandAlreadyOwned();\\nerror NotOwner();\\nerror InvalidLength();\\n\\ncontract Map is ERC721, Owned {\\n    // // rectangular land with coordinates of corners as (x,y), (x,y+perSize), (x+perSize,y), (x+perSize,y+perSize)\\n    struct Land {\\n        uint256 xIndex;\\n        uint256 yIndex;\\n    }\\n    uint256 public size;\\n    uint256 public perSize;\\n    uint256 public landCount;\\n    string public baseUri;\\n    uint256 public utilCount;\\n    address public utilsAddress;\\n\\n    // x/perSize,y/perSize to LandId\\n    // [ (x/perSize,y/perSize) to LandId ] of rectangular land with coordinates of corners as (x,y), (x,y+perSize), (x+perSize,y), (x+perSize,y+perSize)\\n    mapping(uint256 => mapping(uint256 => uint256)) public landIds;\\n    // mapping of LandId to Land (xIndex, yIndex)\\n    mapping(uint256 => Land) public land;\\n\\n    // x,y to utilId\\n    mapping(uint256 => mapping(uint256 => uint256)) public map;\\n\\n    constructor(\\n        uint256 _size,\\n        uint256 _perSize,\\n        string memory _baseUri,\\n        address _utilsAddress\\n    ) ERC721(\\\"Map\\\", \\\"MAP\\\") Owned(msg.sender) {\\n        if (_size == 0) revert ZeroSize();\\n        if (_perSize == 0) revert ZeroPerSize();\\n        size = _size;\\n        perSize = _perSize;\\n        if (_size % perSize != 0) revert SizeNotDivisibleByPerSize();\\n        baseUri = _baseUri;\\n        utilsAddress = _utilsAddress;\\n    }\\n\\n    function mint(uint256 xIndex, uint256 yIndex) public returns (uint256) {\\n        if (xIndex >= size / perSize) revert InvalidXIndex();\\n        if (yIndex >= size / perSize) revert InvalidYIndex();\\n        if (landIds[xIndex][yIndex] != 0) revert LandAlreadyOwned();\\n        landCount += 1;\\n        // land[id] = Land(x, y);\\n        landIds[xIndex][yIndex] = landCount;\\n        land[landCount] = Land(xIndex, yIndex);\\n        _mint(msg.sender, landCount);\\n        return landCount;\\n    }\\n\\n    function placeItem(uint256 x, uint256 y, uint256 utilId) public {\\n        if (msg.sender != ownerOf(landIds[x / perSize][y / perSize]))\\n            revert NotOwner();\\n        ERC1155 utils = ERC1155(utilsAddress);\\n        if (map[x][y] != 0) {\\n            utils.safeTransferFrom(address(this), msg.sender, map[x][y], 1, \\\"\\\");\\n        }\\n        utils.safeTransferFrom(msg.sender, address(this), utilId, 1, \\\"\\\");\\n        map[x][y] = utilId;\\n    }\\n\\n    function removeItem(uint256 x, uint256 y) public {\\n        if (msg.sender != ownerOf(landIds[x / perSize][y / perSize]))\\n            revert NotOwner();\\n        ERC1155 utils = ERC1155(utilsAddress);\\n        if (map[x][y] != 0) {\\n            utils.safeTransferFrom(address(this), msg.sender, map[x][y], 1, \\\"\\\");\\n        }\\n        map[x][y] = 0;\\n    }\\n\\n    function placeItems(\\n        uint256[] memory x,\\n        uint256[] memory y,\\n        uint256[] memory utilId\\n    ) public {\\n        if (x.length != y.length) revert InvalidLength();\\n        if (x.length != utilId.length) revert InvalidLength();\\n        for (uint256 i = 0; i < x.length; i++) {\\n            placeItem(x[i], y[i], utilId[i]);\\n        }\\n    }\\n\\n    function tokenURI(\\n        uint256 id\\n    ) public view virtual override returns (string memory) {\\n        return string.concat(baseUri, LibString.toString(id));\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xe571f6bfe4a40ef1ac38231d8142b7b30ce8592087d2d6404fd583927f9de451\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001dfb38038062001dfb83398101604081905262000034916200027c565b336040518060400160405280600381526020016204d61760ec1b8152506040518060400160405280600381526020016204d41560ec1b815250816000908051906020019062000085929190620001a3565b5080516200009b906001906020840190620001a3565b5050600680546001600160a01b0319166001600160a01b0384169081179091556040519091506000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350836000036200010c5760405163c459d23f60e01b815260040160405180910390fd5b826000036200012e57604051630c110df560e41b815260040160405180910390fd5b6007849055600883905562000144838562000382565b156200016357604051632b0baa0760e11b815260040160405180910390fd5b81516200017890600a906020850190620001a3565b50600c80546001600160a01b0319166001600160a01b039290921691909117905550620003e1915050565b828054620001b190620003a5565b90600052602060002090601f016020900481019282620001d5576000855562000220565b82601f10620001f057805160ff191683800117855562000220565b8280016001018555821562000220579182015b828111156200022057825182559160200191906001019062000203565b506200022e92915062000232565b5090565b5b808211156200022e576000815560010162000233565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200027757600080fd5b919050565b600080600080608085870312156200029357600080fd5b845160208087015160408801519296509450906001600160401b0380821115620002bc57600080fd5b818801915088601f830112620002d157600080fd5b815181811115620002e657620002e662000249565b604051601f8201601f19908116603f0116810190838211818310171562000311576200031162000249565b816040528281528b868487010111156200032a57600080fd5b600093505b828410156200034e57848401860151818501870152928501926200032f565b82841115620003605760008684830101525b80975050505050505062000377606086016200025f565b905092959194509250565b600082620003a057634e487b7160e01b600052601260045260246000fd5b500690565b600181811c90821680620003ba57607f821691505b602082108103620003db57634e487b7160e01b600052602260045260246000fd5b50919050565b611a0a80620003f16000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063949d225d11610104578063b88d4fde116100a2578063d7bce65811610071578063d7bce6581461046c578063e985e9c514610475578063f23a6e61146104a3578063f2fde38b146104c257600080fd5b8063b88d4fde14610405578063baacbe9b14610418578063bc197c8114610421578063c87b56dd1461045957600080fd5b80639abc8320116100de5780639abc8320146103b6578063a22cb465146103be578063a90b9128146103d1578063ae9deae4146103fc57600080fd5b8063949d225d1461039257806395d89b411461039b57806395f5b17a146103a357600080fd5b806323b872dd1161017c57806370a082311161014b57806370a082311461031d578063861e465614610330578063870fc3471461036c5780638da5cb5b1461037f57600080fd5b806323b872dd146102d157806342842e0e146102e4578063512c4aaf146102f75780636352211e1461030a57600080fd5b8063095ea7b3116101b8578063095ea7b31461025d5780630d0637b31461027257806319579a54146102855780631b2ef1ca146102be57600080fd5b806301ffc9a7146101df57806306fdde0314610207578063081812fc1461021c575b600080fd5b6101f26101ed366004611256565b6104d5565b60405190151581526020015b60405180910390f35b61020f610527565b6040516101fe91906112a6565b61024561022a3660046112d9565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b61027061026b366004611309565b6105b5565b005b6102706102803660046113fa565b61069c565b6102b0610293366004611482565b600d60209081526000928352604080842090915290825290205481565b6040519081526020016101fe565b6102b06102cc366004611482565b61075a565b6102706102df3660046114a4565b610867565b6102706102f23660046114a4565b610a2e565b600c54610245906001600160a01b031681565b6102456103183660046112d9565b610b26565b6102b061032b3660046114e0565b610b7d565b61035761033e3660046112d9565b600e602052600090815260409020805460019091015482565b604080519283526020830191909152016101fe565b61027061037a366004611482565b610be0565b600654610245906001600160a01b031681565b6102b060075481565b61020f610d23565b6102706103b13660046114fb565b610d30565b61020f610ec4565b6102706103cc366004611527565b610ed1565b6102b06103df366004611482565b600f60209081526000928352604080842090915290825290205481565b6102b060085481565b610270610413366004611563565b610f3d565b6102b0600b5481565b61044061042f36600461166e565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016101fe565b61020f6104673660046112d9565b611025565b6102b060095481565b6101f2610483366004611718565b600560209081526000928352604080842090915290825290205460ff1681565b6104406104b136600461174b565b63f23a6e6160e01b95945050505050565b6102706104d03660046114e0565b611059565b60006301ffc9a760e01b6001600160e01b03198316148061050657506380ac58cd60e01b6001600160e01b03198316145b806105215750635b5e139f60e01b6001600160e01b03198316145b92915050565b60008054610534906117b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610560906117b0565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b0316338114806105fe57506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6106405760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b81518351146106be5760405163251f56a160e21b815260040160405180910390fd5b80518351146106e05760405163251f56a160e21b815260040160405180910390fd5b60005b835181101561075457610742848281518110610701576107016117ea565b602002602001015184838151811061071b5761071b6117ea565b6020026020010151848481518110610735576107356117ea565b6020026020010151610d30565b8061074c81611816565b9150506106e3565b50505050565b600060085460075461076c919061182f565b831061078b5760405163c24c736760e01b815260040160405180910390fd5b60085460075461079b919061182f565b82106107ba57604051634665aadb60e11b815260040160405180910390fd5b6000838152600d60209081526040808320858452909152902054156107f2576040516306a9893b60e51b815260040160405180910390fd5b6001600960008282546108059190611851565b9091555050600980546000858152600d60209081526040808320878452825280832084905580518082018252888152808301888152948452600e9092529091209051815590516001909101555461085d9033906110ee565b5060095492915050565b6000818152600260205260409020546001600160a01b038481169116146108bd5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b6044820152606401610637565b6001600160a01b0382166109075760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610637565b336001600160a01b038416148061094157506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061096257506000818152600460205260409020546001600160a01b031633145b61099f5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610637565b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610a39838383610867565b6001600160a01b0382163b1580610ae25750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190611869565b6001600160e01b031916145b610b215760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606401610637565b505050565b6000818152600260205260409020546001600160a01b031680610b785760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b6044820152606401610637565b919050565b60006001600160a01b038216610bc45760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606401610637565b506001600160a01b031660009081526003602052604090205490565b610c27600d600060085485610bf5919061182f565b8152602001908152602001600020600060085484610c13919061182f565b815260200190815260200160002054610b26565b6001600160a01b0316336001600160a01b031614610c58576040516330cd747160e01b815260040160405180910390fd5b600c546000838152600f602090815260408083208584529091529020546001600160a01b039091169015610d06576000838152600f6020908152604080832085845290915290819020549051637921219560e11b81526001600160a01b0383169163f242432a91610cd3913091339190600190600401611886565b600060405180830381600087803b158015610ced57600080fd5b505af1158015610d01573d6000803e3d6000fd5b505050505b506000918252600f60209081526040808420928452919052812055565b60018054610534906117b0565b610d63600d600060085486610d45919061182f565b8152602001908152602001600020600060085485610c13919061182f565b6001600160a01b0316336001600160a01b031614610d94576040516330cd747160e01b815260040160405180910390fd5b600c546000848152600f602090815260408083208684529091529020546001600160a01b039091169015610e42576000848152600f6020908152604080832086845290915290819020549051637921219560e11b81526001600160a01b0383169163f242432a91610e0f913091339190600190600401611886565b600060405180830381600087803b158015610e2957600080fd5b505af1158015610e3d573d6000803e3d6000fd5b505050505b604051637921219560e11b81526001600160a01b0382169063f242432a90610e7590339030908790600190600401611886565b600060405180830381600087803b158015610e8f57600080fd5b505af1158015610ea3573d6000803e3d6000fd5b50505060009485525050600f60209081526040808520938552929052912055565b600a8054610534906117b0565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610f48858585610867565b6001600160a01b0384163b1580610fdf5750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290610f909033908a908990899089906004016118be565b6020604051808303816000875af1158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd39190611869565b6001600160e01b031916145b61101e5760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606401610637565b5050505050565b6060600a611032836111f9565b60405160200161104392919061192e565b6040516020818303038152906040529050919050565b6006546001600160a01b031633146110a25760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610637565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6001600160a01b0382166111385760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610637565b6000818152600260205260409020546001600160a01b03161561118e5760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b6044820152606401610637565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806112135750819003601f19909101908152919050565b6001600160e01b03198116811461125357600080fd5b50565b60006020828403121561126857600080fd5b81356112738161123d565b9392505050565b60005b8381101561129557818101518382015260200161127d565b838111156107545750506000910152565b60208152600082518060208401526112c581604085016020870161127a565b601f01601f19169190910160400192915050565b6000602082840312156112eb57600080fd5b5035919050565b80356001600160a01b0381168114610b7857600080fd5b6000806040838503121561131c57600080fd5b611325836112f2565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561137257611372611333565b604052919050565b600082601f83011261138b57600080fd5b8135602067ffffffffffffffff8211156113a7576113a7611333565b8160051b6113b6828201611349565b92835284810182019282810190878511156113d057600080fd5b83870192505b848310156113ef578235825291830191908301906113d6565b979650505050505050565b60008060006060848603121561140f57600080fd5b833567ffffffffffffffff8082111561142757600080fd5b6114338783880161137a565b9450602086013591508082111561144957600080fd5b6114558783880161137a565b9350604086013591508082111561146b57600080fd5b506114788682870161137a565b9150509250925092565b6000806040838503121561149557600080fd5b50508035926020909101359150565b6000806000606084860312156114b957600080fd5b6114c2846112f2565b92506114d0602085016112f2565b9150604084013590509250925092565b6000602082840312156114f257600080fd5b611273826112f2565b60008060006060848603121561151057600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561153a57600080fd5b611543836112f2565b91506020830135801515811461155857600080fd5b809150509250929050565b60008060008060006080868803121561157b57600080fd5b611584866112f2565b9450611592602087016112f2565b935060408601359250606086013567ffffffffffffffff808211156115b657600080fd5b818801915088601f8301126115ca57600080fd5b8135818111156115d957600080fd5b8960208285010111156115eb57600080fd5b9699959850939650602001949392505050565b600082601f83011261160f57600080fd5b813567ffffffffffffffff81111561162957611629611333565b61163c601f8201601f1916602001611349565b81815284602083860101111561165157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561168657600080fd5b61168f866112f2565b945061169d602087016112f2565b9350604086013567ffffffffffffffff808211156116ba57600080fd5b6116c689838a0161137a565b945060608801359150808211156116dc57600080fd5b6116e889838a0161137a565b935060808801359150808211156116fe57600080fd5b5061170b888289016115fe565b9150509295509295909350565b6000806040838503121561172b57600080fd5b611734836112f2565b9150611742602084016112f2565b90509250929050565b600080600080600060a0868803121561176357600080fd5b61176c866112f2565b945061177a602087016112f2565b93506040860135925060608601359150608086013567ffffffffffffffff8111156117a457600080fd5b61170b888289016115fe565b600181811c908216806117c457607f821691505b6020821081036117e457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161182857611828611800565b5060010190565b60008261184c57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561186457611864611800565b500190565b60006020828403121561187b57600080fd5b81516112738161123d565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000815161192481856020860161127a565b9290920192915050565b600080845481600182811c91508083168061194a57607f831692505b6020808410820361196957634e487b7160e01b86526022600452602486fd5b81801561197d576001811461198e576119bb565b60ff198616895284890196506119bb565b60008b81526020902060005b868110156119b35781548b82015290850190830161199a565b505084890196505b5050505050506119cb8185611912565b9594505050505056fea2646970667358221220318139f949df7bebe6f4b0bc7495d26d7e58bd269de50f12107a83fac5348d2464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063949d225d11610104578063b88d4fde116100a2578063d7bce65811610071578063d7bce6581461046c578063e985e9c514610475578063f23a6e61146104a3578063f2fde38b146104c257600080fd5b8063b88d4fde14610405578063baacbe9b14610418578063bc197c8114610421578063c87b56dd1461045957600080fd5b80639abc8320116100de5780639abc8320146103b6578063a22cb465146103be578063a90b9128146103d1578063ae9deae4146103fc57600080fd5b8063949d225d1461039257806395d89b411461039b57806395f5b17a146103a357600080fd5b806323b872dd1161017c57806370a082311161014b57806370a082311461031d578063861e465614610330578063870fc3471461036c5780638da5cb5b1461037f57600080fd5b806323b872dd146102d157806342842e0e146102e4578063512c4aaf146102f75780636352211e1461030a57600080fd5b8063095ea7b3116101b8578063095ea7b31461025d5780630d0637b31461027257806319579a54146102855780631b2ef1ca146102be57600080fd5b806301ffc9a7146101df57806306fdde0314610207578063081812fc1461021c575b600080fd5b6101f26101ed366004611256565b6104d5565b60405190151581526020015b60405180910390f35b61020f610527565b6040516101fe91906112a6565b61024561022a3660046112d9565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b61027061026b366004611309565b6105b5565b005b6102706102803660046113fa565b61069c565b6102b0610293366004611482565b600d60209081526000928352604080842090915290825290205481565b6040519081526020016101fe565b6102b06102cc366004611482565b61075a565b6102706102df3660046114a4565b610867565b6102706102f23660046114a4565b610a2e565b600c54610245906001600160a01b031681565b6102456103183660046112d9565b610b26565b6102b061032b3660046114e0565b610b7d565b61035761033e3660046112d9565b600e602052600090815260409020805460019091015482565b604080519283526020830191909152016101fe565b61027061037a366004611482565b610be0565b600654610245906001600160a01b031681565b6102b060075481565b61020f610d23565b6102706103b13660046114fb565b610d30565b61020f610ec4565b6102706103cc366004611527565b610ed1565b6102b06103df366004611482565b600f60209081526000928352604080842090915290825290205481565b6102b060085481565b610270610413366004611563565b610f3d565b6102b0600b5481565b61044061042f36600461166e565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016101fe565b61020f6104673660046112d9565b611025565b6102b060095481565b6101f2610483366004611718565b600560209081526000928352604080842090915290825290205460ff1681565b6104406104b136600461174b565b63f23a6e6160e01b95945050505050565b6102706104d03660046114e0565b611059565b60006301ffc9a760e01b6001600160e01b03198316148061050657506380ac58cd60e01b6001600160e01b03198316145b806105215750635b5e139f60e01b6001600160e01b03198316145b92915050565b60008054610534906117b0565b80601f0160208091040260200160405190810160405280929190818152602001828054610560906117b0565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b0316338114806105fe57506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6106405760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b81518351146106be5760405163251f56a160e21b815260040160405180910390fd5b80518351146106e05760405163251f56a160e21b815260040160405180910390fd5b60005b835181101561075457610742848281518110610701576107016117ea565b602002602001015184838151811061071b5761071b6117ea565b6020026020010151848481518110610735576107356117ea565b6020026020010151610d30565b8061074c81611816565b9150506106e3565b50505050565b600060085460075461076c919061182f565b831061078b5760405163c24c736760e01b815260040160405180910390fd5b60085460075461079b919061182f565b82106107ba57604051634665aadb60e11b815260040160405180910390fd5b6000838152600d60209081526040808320858452909152902054156107f2576040516306a9893b60e51b815260040160405180910390fd5b6001600960008282546108059190611851565b9091555050600980546000858152600d60209081526040808320878452825280832084905580518082018252888152808301888152948452600e9092529091209051815590516001909101555461085d9033906110ee565b5060095492915050565b6000818152600260205260409020546001600160a01b038481169116146108bd5760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b6044820152606401610637565b6001600160a01b0382166109075760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610637565b336001600160a01b038416148061094157506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061096257506000818152600460205260409020546001600160a01b031633145b61099f5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610637565b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610a39838383610867565b6001600160a01b0382163b1580610ae25750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190611869565b6001600160e01b031916145b610b215760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606401610637565b505050565b6000818152600260205260409020546001600160a01b031680610b785760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b6044820152606401610637565b919050565b60006001600160a01b038216610bc45760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606401610637565b506001600160a01b031660009081526003602052604090205490565b610c27600d600060085485610bf5919061182f565b8152602001908152602001600020600060085484610c13919061182f565b815260200190815260200160002054610b26565b6001600160a01b0316336001600160a01b031614610c58576040516330cd747160e01b815260040160405180910390fd5b600c546000838152600f602090815260408083208584529091529020546001600160a01b039091169015610d06576000838152600f6020908152604080832085845290915290819020549051637921219560e11b81526001600160a01b0383169163f242432a91610cd3913091339190600190600401611886565b600060405180830381600087803b158015610ced57600080fd5b505af1158015610d01573d6000803e3d6000fd5b505050505b506000918252600f60209081526040808420928452919052812055565b60018054610534906117b0565b610d63600d600060085486610d45919061182f565b8152602001908152602001600020600060085485610c13919061182f565b6001600160a01b0316336001600160a01b031614610d94576040516330cd747160e01b815260040160405180910390fd5b600c546000848152600f602090815260408083208684529091529020546001600160a01b039091169015610e42576000848152600f6020908152604080832086845290915290819020549051637921219560e11b81526001600160a01b0383169163f242432a91610e0f913091339190600190600401611886565b600060405180830381600087803b158015610e2957600080fd5b505af1158015610e3d573d6000803e3d6000fd5b505050505b604051637921219560e11b81526001600160a01b0382169063f242432a90610e7590339030908790600190600401611886565b600060405180830381600087803b158015610e8f57600080fd5b505af1158015610ea3573d6000803e3d6000fd5b50505060009485525050600f60209081526040808520938552929052912055565b600a8054610534906117b0565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610f48858585610867565b6001600160a01b0384163b1580610fdf5750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290610f909033908a908990899089906004016118be565b6020604051808303816000875af1158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd39190611869565b6001600160e01b031916145b61101e5760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606401610637565b5050505050565b6060600a611032836111f9565b60405160200161104392919061192e565b6040516020818303038152906040529050919050565b6006546001600160a01b031633146110a25760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610637565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6001600160a01b0382166111385760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610637565b6000818152600260205260409020546001600160a01b03161561118e5760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b6044820152606401610637565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a9004806112135750819003601f19909101908152919050565b6001600160e01b03198116811461125357600080fd5b50565b60006020828403121561126857600080fd5b81356112738161123d565b9392505050565b60005b8381101561129557818101518382015260200161127d565b838111156107545750506000910152565b60208152600082518060208401526112c581604085016020870161127a565b601f01601f19169190910160400192915050565b6000602082840312156112eb57600080fd5b5035919050565b80356001600160a01b0381168114610b7857600080fd5b6000806040838503121561131c57600080fd5b611325836112f2565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561137257611372611333565b604052919050565b600082601f83011261138b57600080fd5b8135602067ffffffffffffffff8211156113a7576113a7611333565b8160051b6113b6828201611349565b92835284810182019282810190878511156113d057600080fd5b83870192505b848310156113ef578235825291830191908301906113d6565b979650505050505050565b60008060006060848603121561140f57600080fd5b833567ffffffffffffffff8082111561142757600080fd5b6114338783880161137a565b9450602086013591508082111561144957600080fd5b6114558783880161137a565b9350604086013591508082111561146b57600080fd5b506114788682870161137a565b9150509250925092565b6000806040838503121561149557600080fd5b50508035926020909101359150565b6000806000606084860312156114b957600080fd5b6114c2846112f2565b92506114d0602085016112f2565b9150604084013590509250925092565b6000602082840312156114f257600080fd5b611273826112f2565b60008060006060848603121561151057600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561153a57600080fd5b611543836112f2565b91506020830135801515811461155857600080fd5b809150509250929050565b60008060008060006080868803121561157b57600080fd5b611584866112f2565b9450611592602087016112f2565b935060408601359250606086013567ffffffffffffffff808211156115b657600080fd5b818801915088601f8301126115ca57600080fd5b8135818111156115d957600080fd5b8960208285010111156115eb57600080fd5b9699959850939650602001949392505050565b600082601f83011261160f57600080fd5b813567ffffffffffffffff81111561162957611629611333565b61163c601f8201601f1916602001611349565b81815284602083860101111561165157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561168657600080fd5b61168f866112f2565b945061169d602087016112f2565b9350604086013567ffffffffffffffff808211156116ba57600080fd5b6116c689838a0161137a565b945060608801359150808211156116dc57600080fd5b6116e889838a0161137a565b935060808801359150808211156116fe57600080fd5b5061170b888289016115fe565b9150509295509295909350565b6000806040838503121561172b57600080fd5b611734836112f2565b9150611742602084016112f2565b90509250929050565b600080600080600060a0868803121561176357600080fd5b61176c866112f2565b945061177a602087016112f2565b93506040860135925060608601359150608086013567ffffffffffffffff8111156117a457600080fd5b61170b888289016115fe565b600181811c908216806117c457607f821691505b6020821081036117e457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161182857611828611800565b5060010190565b60008261184c57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561186457611864611800565b500190565b60006020828403121561187b57600080fd5b81516112738161123d565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000815161192481856020860161127a565b9290920192915050565b600080845481600182811c91508083168061194a57607f831692505b6020808410820361196957634e487b7160e01b86526022600452602486fd5b81801561197d576001811461198e576119bb565b60ff198616895284890196506119bb565b60008b81526020902060005b868110156119b35781548b82015290850190830161199a565b505084890196505b5050505050506119cb8185611912565b9594505050505056fea2646970667358221220318139f949df7bebe6f4b0bc7495d26d7e58bd269de50f12107a83fac5348d2464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 767,
        "contract": "src/Map.sol:Map",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 769,
        "contract": "src/Map.sol:Map",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 780,
        "contract": "src/Map.sol:Map",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 784,
        "contract": "src/Map.sol:Map",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 833,
        "contract": "src/Map.sol:Map",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 839,
        "contract": "src/Map.sol:Map",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10,
        "contract": "src/Map.sol:Map",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1381,
        "contract": "src/Map.sol:Map",
        "label": "size",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1383,
        "contract": "src/Map.sol:Map",
        "label": "perSize",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1385,
        "contract": "src/Map.sol:Map",
        "label": "landCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1387,
        "contract": "src/Map.sol:Map",
        "label": "baseUri",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 1389,
        "contract": "src/Map.sol:Map",
        "label": "utilCount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1391,
        "contract": "src/Map.sol:Map",
        "label": "utilsAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 1397,
        "contract": "src/Map.sol:Map",
        "label": "landIds",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1402,
        "contract": "src/Map.sol:Map",
        "label": "land",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Land)1379_storage)"
      },
      {
        "astId": 1408,
        "contract": "src/Map.sol:Map",
        "label": "map",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Land)1379_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Map.Land)",
        "numberOfBytes": "32",
        "value": "t_struct(Land)1379_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Land)1379_storage": {
        "encoding": "inplace",
        "label": "struct Map.Land",
        "members": [
          {
            "astId": 1376,
            "contract": "src/Map.sol:Map",
            "label": "xIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1378,
            "contract": "src/Map.sol:Map",
            "label": "yIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}